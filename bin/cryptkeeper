#!/bin/bash
#
# Handles encryption decryption of stuff

set -e

NC='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
YELLOW='\033[1;33m'

if ! hash cpath 2>/dev/null; then
  >&2 printf "%b- cpath required, installing globally... -%b" "$CYAN" "$NC"
  npm install -g cpath
fi

encrypt=false
decrypt=false
net_encryption=false
section=""
provider="RsaProtectedConfigurationProvider"
container=""
export=false
export_root="$PWD"
reexport=false

usage_short="${BLUE}usage: cryptkeeper [-e] [-d] [-n] [-s section] [-p provider] [-C container] [-E export-directory] [-R] path"
usage_long="$usage_short\n-e: encrypt target"
usage_long="$usage_long\n-d: decrypts target"
usage_long="$usage_long\n-n: specifies to use .NET encryption"
usage_long="$usage_long\n-s: specifies section of file to be encrypted"
usage_long="$usage_long\n-p: specifies provider to use"
usage_long="$usage_long\n-C: specifies container to use"
usage_long="$usage_long\n-E: export the keys to xml file to be deployed"
usage_long="$usage_long\n-R: delete and reexport container${NC}"

usage_short="$usage_short\nuse -h to get supported command information${NC}"

if [ "$#" == "0" ] ; then
  >&2 printf "%b" "$usage_short"
  exit 1
fi

options=":edns:p:C:E:Rh"
shopt -u nocasematch
OPTIND=1
while getopts "$options" opt ; do
    case "$opt" in
    e )
      encrypt=true
      ;;
    d )
      decrypt=true
      ;;
    n )
      net_encryption=true
      ;;
    s )
      section=$OPTARG
      ;;
    p )
      provider=$OPTARG
      ;;
    C )
      container=$OPTARG
      ;;
    E )
      export=true
      if [ "$OPTARG" != true ] ; then
        export_root="$OPTARG"
      fi
      ;;
    R )
      reexport=true
      ;;
    h )
      >&2 printf "%b" "$usage_long" && exit 1
      exit 0
      ;;
    \?)
      >&2 printf "%b" "unknown option: -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
      ;;
    : )
      >&2 printf "%b" "missing option argument for -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
      ;;
    * )
      >&2 printf "%b" "unimplemented option: -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))

file_path="$1"
shift

if [ "$encrypt" = "$decrypt" ] ; then
  >&2 printf "%b- must specify encrypt (-e) or decrypt (-d) but not both -%b" "$RED" "$NC"
  exit 1
fi

file_root="$(dirname "$file_path")"
file_name="$(basename "$file_path")"

if [ "$net_encryption" = true ] ; then
  if [ "$section" = "" ] ; then
    >&2 printf "%b- must set app config section to encrypt using .NET encryption -%b" "$RED" "$NC"
    exit 1
  fi

  if [ "$export" = true ] ; then
    export_script_path="${export_root}/${container}.cmd"
    export_xml_path="${export_root}/${container}.xml"
    rimraf "$export_script_path"
    rimraf "$export_xml_path"
    win_export_xml_path="$(cpath -w "$export_xml_path")"
    win_export_script_path="$(cpath -w "$export_script_path")"
    >&2 printf -- "- exporting keys to %s -" "$win_export_xml_path"
    if [ "$reexport" = true ] ; then
      aspnet_regiis -pz "$container" || true
    fi
    aspnet_regiis -pc "$container" -exp || true
    aspnet_regiis -px "$container" "$win_export_xml_path" -pri

    container_path="%CD%\\$container.xml"
    printf -- "set RSA_CONTAINER_PATH=\"%s\"\r\npushd %%windir%%\Microsoft.NET\Framework64\v4.0.30319\r\naspnet_regiis -pi \"%s\" \"%%RSA_CONTAINER_PATH%%\"\r\naspnet_regiis -pa \"%s\" \"NT Authority\Network Service\"\r\npopd" "$container_path" "$container" "$container" >"$win_export_script_path"
  fi

  web_config_path="$file_root/web.config"
  cp "$file_path" "$web_config_path"
  win_file_root="$(cpath -w "$file_root")"
  if [ "$encrypt" = true ] ; then
    >&2 printf -- "- encrypting %s of config in %s -" "$section" "$win_file_root"
    aspnet_regiis -pef "$section" "$win_file_root" -prov "$provider"
    >&2 printf "%b- encryption completed successfully -%b" "$GREEN" "$NC"
  elif [ "$decrypt" = true ] ; then
    >&2 printf -- "- decrypting %s of config in %s -" "$section" "$win_file_root"
    aspnet_regiis -pdf "$section" "$win_file_root" -prov "$provider"
    >&2 printf "%b- decryption completed successfully -%b" "$GREEN" "$NC"
  fi
  rm "$file_path"
  mv "$web_config_path" "$file_path"
fi

